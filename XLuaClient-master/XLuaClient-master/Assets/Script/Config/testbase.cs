using System;using System.Collections;using System.Collections.Generic;public class testBase{	public readonly string heroID;	public readonly string heroName;	public readonly uint hp;	public readonly float rate;}public class testBaseManager: Singleton<testBaseManager>{	private Dictionary<string, testBase> m_dataList = new Dictionary<string, testBase>();	private readonly long version=131751120504164001;	public int Size	{		get { return m_dataList.Count; }	}	public testBase  Get(int index)	{		if (index > -1 && index < m_dataList.Count)		{			int i = 0;			 foreach (var tmp in m_dataList.Values)			 {				 if (index == i)				 {					return tmp;				 }				 i++;			 }		}		  return null;	}	public testBase Find(int key1,int key2=-1,int key3=-1)	{		 string key = key1.ToString();		 if (key2 != -1) { key += key2.ToString(); }		 if (key3 != -1) { key += key3.ToString(); }		 if (m_dataList.ContainsKey(key))		 {			return m_dataList[key];		 }		 return null;	}	public testBase Find(string key1, string key2 ="", string key3 = "")	{		 string key = key1.ToString();		 if (key2 != "") { key += key2.ToString(); }		 if (key3 != "") { key += key3.ToString(); }		 if (m_dataList.ContainsKey(key))		 {			return m_dataList[key];		 }		 return null;	}	 public bool Load(string path)	 {		 return TableUtility.instance.Load<testBase>(path,ref m_dataList,version.ToString());	}  }
