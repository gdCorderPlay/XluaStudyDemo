using System;using System.Collections;using System.Collections.Generic;public class RoleSoundBase{	public readonly int RoleID;	public readonly int Damage;	public readonly int Attack;	public readonly int Skill;	public readonly int Kill;	public readonly int Sprint;	public readonly int Death;	public readonly int Enter;	public readonly int Dying;}public class RoleSoundBaseManager: Singleton<RoleSoundBaseManager>{	private Dictionary<string, RoleSoundBase> m_dataList = new Dictionary<string, RoleSoundBase>();	private readonly long version=131751120503694001;	public int Size	{		get { return m_dataList.Count; }	}	public RoleSoundBase  Get(int index)	{		if (index > -1 && index < m_dataList.Count)		{			int i = 0;			 foreach (var tmp in m_dataList.Values)			 {				 if (index == i)				 {					return tmp;				 }				 i++;			 }		}		  return null;	}	public RoleSoundBase Find(int key1,int key2=-1,int key3=-1)	{		 string key = key1.ToString();		 if (key2 != -1) { key += key2.ToString(); }		 if (key3 != -1) { key += key3.ToString(); }		 if (m_dataList.ContainsKey(key))		 {			return m_dataList[key];		 }		 return null;	}	public RoleSoundBase Find(string key1, string key2 ="", string key3 = "")	{		 string key = key1.ToString();		 if (key2 != "") { key += key2.ToString(); }		 if (key3 != "") { key += key3.ToString(); }		 if (m_dataList.ContainsKey(key))		 {			return m_dataList[key];		 }		 return null;	}	 public bool Load(string path)	 {		 return TableUtility.instance.Load<RoleSoundBase>(path,ref m_dataList,version.ToString());	}  }
